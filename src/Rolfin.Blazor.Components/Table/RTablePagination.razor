@typeparam ListType


@code {
    [CascadingParameter(Name = "Table")] public RTable<ListType> Table { get; set; }

    [Parameter] public string ItemsOnPage {

        get => _itemsOnPage.Aggregate("", (val, next) =>
        {
            val += next == _itemsOnPage.Last() ? val : val + ",";
            return val;
        });

        set
        {
            _itemsOnPage.Clear();
            value.Split(",").ToList().ForEach(x =>
            {
                var isInt = int.TryParse(x, out int intVal);
                if (isInt is true)
                    _itemsOnPage.Add(intVal);
            });
        }

    }
    [Parameter] public string FromText { get; set; } = "From";

    internal List<int> _itemsOnPage = new List<int>() { 10, 25, 50, 100 };

    protected override Task OnInitializedAsync()
    {
        if (Table?.paginationSettings == null)
        {
            Table?.selectItemsOnPage(_itemsOnPage.First());
            Table?.SetPaginationSettings(this);
        }

        return base.OnInitializedAsync();
    }
}
