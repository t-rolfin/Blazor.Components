@attribute [CascadingTypeParameter(nameof(ListType))]
@typeparam ListType


<CascadingValue Value=this Name="Table" IsFixed=true>

    @if (searchSettings is not null)
    {
        <div class="header-container">
            <div class="items-on-page-container">
                <span>@ItemsOnPageText</span>
                <select @onchange=@((ChangeEventArgs e) => selectItemsOnPage(e))>
                    @foreach (var value in paginationSettings._itemsOnPage)
                    {
                        if (value == paginationSettings._itemsOnPage.First())
                        {
                            <option selected value="@value">@value</option>
                        }
                        else
                        {
                            <option value="@value">@value</option>
                        }
                    }
                </select>
            </div>
            @if(searchSettings.SearchCriteria is not null)
            {
                <div class="search-container">
                    <input type="text" @oninput=Search placeholder="@searchSettings.Placeholder" />
                </div>
            }
        </div>
        <div>
            @searchSettings.ChildContent
        </div>
    }

    @if (_displaiedValues == null)
    {
        <p>Loadinng...</p>
    }
    else
    {
        <table class="table table-striped tabel-hover">

            <thead>
                <tr class="table-active">
                    @ChildContent
                </tr>
            </thead>

            @if (_displaiedValues.Count != 0)
            {
                <tbody>
                    @foreach (var item in _displaiedValues)
                    {
                        <tr>
                            <CascadingValue Value=@item>
                                @ChildContent
                            </CascadingValue>
                        </tr>
                    }
                </tbody>
            }
        </table>

        if(_footer is not null)
        {
            @_footer.ChildContent
        }

        if (_displaiedValues.Count == 0)
        {
            <div class="d-flex justify-content-center w-100">
                <span class="bi bi-info-circle me-2"></span>
                <span>@NotFoundText</span>
            </div>
        }

        if (paginationSettings is not null && _displaiedValues.Count != 0 && pages > 1)
        {
            <nav class="pt-1 pb-1 d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center w-100">
                    <div class="table-footer-info">
                        <span>@itemsShowed @paginationSettings.FromText @totalItems</span>
                    </div>
                    <div class="d-flex align-items-center page-control-container w-50">
                        <span @onclick=@(() => ChangePage(currentPage - 1)) class="bi bi-chevron-left"></span>
                        <input class="input-page-number" type="number" value="@currentPage" @onchange=@(e => InsertPage(int.Parse(e.Value.ToString()))) />
                        <span @onclick=@(() => ChangePage(currentPage + 1)) class="bi bi-chevron-right"></span>
                    </div>
                </div>
            </nav>
        }
    }
</CascadingValue>


@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public List<ListType> Values { get; set; }
    [Parameter] public string NotFoundText { get; set; } = "Not elements found!";
    [Parameter] public string ItemsOnPageText { get; set; } = "Items on page";

    internal RTablePagination<ListType> paginationSettings { get; set; }
    internal RTableSearch<ListType> searchSettings { get; set; }
    internal RTableFooter<ListType> _footer { get; set; }

    private List<ListType> _filteredValues { get; set; }
    private List<ListType> _displaiedValues { get; set; }
    private int currentPage = 1;
    private int itemsShowed = 0;
    private int totalItems = 0;
    private int prevCount = 0;
    private int pages = 0;
    private int itemsOnPage;

    protected override Task OnParametersSetAsync()
    {
        _displaiedValues = Values.ToList();
        _filteredValues = Values.ToList();

        if (paginationSettings is not null)
            InsertPage(currentPage);

        return base.OnParametersSetAsync();
    }

    void Search(ChangeEventArgs @event)
    {
        _displaiedValues.Clear();
        _filteredValues.Clear();

        Values.ForEach(x =>
        {
            if (searchSettings.SearchCriteria.Invoke(x, @event.Value.ToString()))
                _filteredValues.Add(x);
        });

        SetPaginationSettings(paginationSettings);
    }
    public void ChangePage(int page)
    {
        if (page < 1 || page > pages) return;

        if(page > currentPage)
            _displaiedValues = _filteredValues.Skip(currentPage * itemsOnPage).Take(itemsOnPage).ToList();
        else
            _displaiedValues = _filteredValues.Skip((page - 1) * itemsOnPage).Take(itemsOnPage).ToList();

        currentPage = page;
        itemsShowed = page == pages ? totalItems : itemsOnPage * currentPage;
    }
    void InsertPage(int newPage)
    {
        if (newPage > pages) newPage = pages;
        if (newPage <= 0) newPage = 1;

        _displaiedValues = _filteredValues
            .Skip((newPage - 1) * itemsOnPage).Take(itemsOnPage)
            .ToList();

        pages = _filteredValues.Count / itemsOnPage + (_filteredValues.Count % itemsOnPage > 0 ? 1 : 0);
        totalItems = _filteredValues.Count();

        currentPage = newPage;
    }
    void selectItemsOnPage(ChangeEventArgs @event)
    {
        bool isInt = int.TryParse(@event.Value.ToString(), out int itemsOnPage);
        if (isInt is false) return;
        this.itemsOnPage = itemsOnPage;

        SetPaginationSettings(paginationSettings);
    }

    internal void selectItemsOnPage(int itemsOnPage)
    {
        this.itemsOnPage = itemsOnPage;
        SetPaginationSettings(paginationSettings);
    }
    internal void SetPaginationSettings(RTablePagination<ListType> pagination)
    {
        paginationSettings = pagination;

        pages = _filteredValues.Count / itemsOnPage + (_filteredValues.Count % itemsOnPage > 0 ? 1 : 0);
        totalItems = _filteredValues.Count();

        ChangePage(1);
        StateHasChanged();
    }
    internal void SetFooter(RTableFooter<ListType> footer) => _footer = footer;
}
